!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e["bind-property"]=e["bind-property"]||{})}(this,function(e){"use strict";function t(e){var t={changeListeners:new Map,preCommitListeners:new Map,priorityQueue:[]};return t.set(e,t),t}function n(){var e=e.get(this)||t(this);return e.changeListeners}function r(){var e=e.get(this)||t(this);return e.preCommitListeners}function i(e){var n=n.get(e)||t(e);return n.priorityQueue}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;i(this).length=0,n.call(this).set(e,t)}function a(e){i(this).length=0,n.call(this).delete(e)}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;r.call(this).set(e,t)}function s(e){r.call(this).delete(e)}function c(e,t,n,r){if(n!==r){var i=y.get(e);void 0===i&&(i={source:e,changes:{}},y.set(e,i));var o=i.changes;o[t]={oldValue:n,newValue:r},w.add(e),L||(L=requestAnimationFrame(function(){var e=w,t=y;w=new Set,y=new Map,L=null,e.forEach(function(e){var n=t.get(e),r=n.changes;l(e,r)})}))}}function f(e){Object.defineProperties(e,{changeListeners:{get:n},preCommitListeners:{get:r},addChangeListener:{value:o},removeChangeListener:{value:a},addPreCommitListener:{value:u},removePreCommitListener:{value:s},suspendNotifications:{value:!1,writable:!0}})}function l(e,t){var n=i(e);0===n.length&&p(n),n.forEach(function(n,r){r(e,t,n)})}function p(e,t){e.changeListeners.forEach(function(e,n){t.push({priority:e,callback:n})}),t.sort(h)}function h(e,t){var n=~~e.priority,r=~~t.priority;return n===r?0:n>r?1:-1}function v(e){return function(){var t=this;return g(t)[e]}}function d(e,t){return function(r){var i=this,o=i.suspendNotifications,a=g(i)[e];"function"==typeof t.set&&(t.set.call(i,r),t.get&&(a=t.get.call(i)));var u=a;a===r||m(i,C({},e,{oldValue:u,newValue:r}))||(a=r,o!==!1||n.call(i).values().next().done||c(i,e,u,r),g(i)[e]=a)}}function g(e){if(P.has(e))return P.get(e);var t={};return P.set(e,t),t}function m(e,t){var n=!1;return e.preCommitListeners.forEach(function(r){n=r(e,t,n)===!1||n}),n}function b(e){return function(t){var n=t.prototype;P.has(n)||(f(n),P.set(n,!0));var r=Object.getOwnPropertyDescriptor(n,e)||{};P.has(r.get)||Object.defineProperty(n,e,{get:r.get||v(e),set:d(e,r),enumerable:r.enumerable})}}var y=new Map,w=new Set,L=void 0,C=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},P=new WeakMap;e.bindable=b,e.queueNotification=c,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
